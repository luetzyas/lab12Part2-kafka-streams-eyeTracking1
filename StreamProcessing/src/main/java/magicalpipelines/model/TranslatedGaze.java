/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package magicalpipelines.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TranslatedGaze extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4226805527199802155L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TranslatedGaze\",\"namespace\":\"magicalpipelines.model\",\"fields\":[{\"name\":\"Timestamp\",\"type\":\"long\"},{\"name\":\"Xpos\",\"type\":\"double\"},{\"name\":\"Ypos\",\"type\":\"double\"},{\"name\":\"PupilSize\",\"type\":\"double\"},{\"name\":\"AOI\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TranslatedGaze> ENCODER =
      new BinaryMessageEncoder<TranslatedGaze>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TranslatedGaze> DECODER =
      new BinaryMessageDecoder<TranslatedGaze>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TranslatedGaze> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TranslatedGaze> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TranslatedGaze>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TranslatedGaze to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TranslatedGaze from a ByteBuffer. */
  public static TranslatedGaze fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long Timestamp;
  @Deprecated public double Xpos;
  @Deprecated public double Ypos;
  @Deprecated public double PupilSize;
  @Deprecated public CharSequence AOI;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TranslatedGaze() {}

  /**
   * All-args constructor.
   * @param Timestamp The new value for Timestamp
   * @param Xpos The new value for Xpos
   * @param Ypos The new value for Ypos
   * @param PupilSize The new value for PupilSize
   * @param AOI The new value for AOI
   */
  public TranslatedGaze(Long Timestamp, Double Xpos, Double Ypos, Double PupilSize, CharSequence AOI) {
    this.Timestamp = Timestamp;
    this.Xpos = Xpos;
    this.Ypos = Ypos;
    this.PupilSize = PupilSize;
    this.AOI = AOI;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return Timestamp;
    case 1: return Xpos;
    case 2: return Ypos;
    case 3: return PupilSize;
    case 4: return AOI;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: Timestamp = (Long)value$; break;
    case 1: Xpos = (Double)value$; break;
    case 2: Ypos = (Double)value$; break;
    case 3: PupilSize = (Double)value$; break;
    case 4: AOI = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Timestamp' field.
   * @return The value of the 'Timestamp' field.
   */
  public Long getTimestamp() {
    return Timestamp;
  }

  /**
   * Sets the value of the 'Timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(Long value) {
    this.Timestamp = value;
  }

  /**
   * Gets the value of the 'Xpos' field.
   * @return The value of the 'Xpos' field.
   */
  public Double getXpos() {
    return Xpos;
  }

  /**
   * Sets the value of the 'Xpos' field.
   * @param value the value to set.
   */
  public void setXpos(Double value) {
    this.Xpos = value;
  }

  /**
   * Gets the value of the 'Ypos' field.
   * @return The value of the 'Ypos' field.
   */
  public Double getYpos() {
    return Ypos;
  }

  /**
   * Sets the value of the 'Ypos' field.
   * @param value the value to set.
   */
  public void setYpos(Double value) {
    this.Ypos = value;
  }

  /**
   * Gets the value of the 'PupilSize' field.
   * @return The value of the 'PupilSize' field.
   */
  public Double getPupilSize() {
    return PupilSize;
  }

  /**
   * Sets the value of the 'PupilSize' field.
   * @param value the value to set.
   */
  public void setPupilSize(Double value) {
    this.PupilSize = value;
  }

  /**
   * Gets the value of the 'AOI' field.
   * @return The value of the 'AOI' field.
   */
  public CharSequence getAOI() {
    return AOI;
  }

  /**
   * Sets the value of the 'AOI' field.
   * @param value the value to set.
   */
  public void setAOI(CharSequence value) {
    this.AOI = value;
  }

  /**
   * Creates a new TranslatedGaze RecordBuilder.
   * @return A new TranslatedGaze RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new TranslatedGaze RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TranslatedGaze RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new TranslatedGaze RecordBuilder by copying an existing TranslatedGaze instance.
   * @param other The existing instance to copy.
   * @return A new TranslatedGaze RecordBuilder
   */
  public static Builder newBuilder(TranslatedGaze other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for TranslatedGaze instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TranslatedGaze>
    implements org.apache.avro.data.RecordBuilder<TranslatedGaze> {

    private long Timestamp;
    private double Xpos;
    private double Ypos;
    private double PupilSize;
    private CharSequence AOI;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Timestamp)) {
        this.Timestamp = data().deepCopy(fields()[0].schema(), other.Timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Xpos)) {
        this.Xpos = data().deepCopy(fields()[1].schema(), other.Xpos);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Ypos)) {
        this.Ypos = data().deepCopy(fields()[2].schema(), other.Ypos);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.PupilSize)) {
        this.PupilSize = data().deepCopy(fields()[3].schema(), other.PupilSize);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.AOI)) {
        this.AOI = data().deepCopy(fields()[4].schema(), other.AOI);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TranslatedGaze instance
     * @param other The existing instance to copy.
     */
    private Builder(TranslatedGaze other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.Timestamp)) {
        this.Timestamp = data().deepCopy(fields()[0].schema(), other.Timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Xpos)) {
        this.Xpos = data().deepCopy(fields()[1].schema(), other.Xpos);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Ypos)) {
        this.Ypos = data().deepCopy(fields()[2].schema(), other.Ypos);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.PupilSize)) {
        this.PupilSize = data().deepCopy(fields()[3].schema(), other.PupilSize);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.AOI)) {
        this.AOI = data().deepCopy(fields()[4].schema(), other.AOI);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'Timestamp' field.
      * @return The value.
      */
    public Long getTimestamp() {
      return Timestamp;
    }

    /**
      * Sets the value of the 'Timestamp' field.
      * @param value The value of 'Timestamp'.
      * @return This builder.
      */
    public Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.Timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Timestamp' field has been set.
      * @return True if the 'Timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Timestamp' field.
      * @return This builder.
      */
    public Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Xpos' field.
      * @return The value.
      */
    public Double getXpos() {
      return Xpos;
    }

    /**
      * Sets the value of the 'Xpos' field.
      * @param value The value of 'Xpos'.
      * @return This builder.
      */
    public Builder setXpos(double value) {
      validate(fields()[1], value);
      this.Xpos = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Xpos' field has been set.
      * @return True if the 'Xpos' field has been set, false otherwise.
      */
    public boolean hasXpos() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Xpos' field.
      * @return This builder.
      */
    public Builder clearXpos() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Ypos' field.
      * @return The value.
      */
    public Double getYpos() {
      return Ypos;
    }

    /**
      * Sets the value of the 'Ypos' field.
      * @param value The value of 'Ypos'.
      * @return This builder.
      */
    public Builder setYpos(double value) {
      validate(fields()[2], value);
      this.Ypos = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Ypos' field has been set.
      * @return True if the 'Ypos' field has been set, false otherwise.
      */
    public boolean hasYpos() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Ypos' field.
      * @return This builder.
      */
    public Builder clearYpos() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'PupilSize' field.
      * @return The value.
      */
    public Double getPupilSize() {
      return PupilSize;
    }

    /**
      * Sets the value of the 'PupilSize' field.
      * @param value The value of 'PupilSize'.
      * @return This builder.
      */
    public Builder setPupilSize(double value) {
      validate(fields()[3], value);
      this.PupilSize = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'PupilSize' field has been set.
      * @return True if the 'PupilSize' field has been set, false otherwise.
      */
    public boolean hasPupilSize() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'PupilSize' field.
      * @return This builder.
      */
    public Builder clearPupilSize() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'AOI' field.
      * @return The value.
      */
    public CharSequence getAOI() {
      return AOI;
    }

    /**
      * Sets the value of the 'AOI' field.
      * @param value The value of 'AOI'.
      * @return This builder.
      */
    public Builder setAOI(CharSequence value) {
      validate(fields()[4], value);
      this.AOI = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'AOI' field has been set.
      * @return True if the 'AOI' field has been set, false otherwise.
      */
    public boolean hasAOI() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'AOI' field.
      * @return This builder.
      */
    public Builder clearAOI() {
      AOI = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TranslatedGaze build() {
      try {
        TranslatedGaze record = new TranslatedGaze();
        record.Timestamp = fieldSetFlags()[0] ? this.Timestamp : (Long) defaultValue(fields()[0]);
        record.Xpos = fieldSetFlags()[1] ? this.Xpos : (Double) defaultValue(fields()[1]);
        record.Ypos = fieldSetFlags()[2] ? this.Ypos : (Double) defaultValue(fields()[2]);
        record.PupilSize = fieldSetFlags()[3] ? this.PupilSize : (Double) defaultValue(fields()[3]);
        record.AOI = fieldSetFlags()[4] ? this.AOI : (CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TranslatedGaze>
    WRITER$ = (org.apache.avro.io.DatumWriter<TranslatedGaze>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TranslatedGaze>
    READER$ = (org.apache.avro.io.DatumReader<TranslatedGaze>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
